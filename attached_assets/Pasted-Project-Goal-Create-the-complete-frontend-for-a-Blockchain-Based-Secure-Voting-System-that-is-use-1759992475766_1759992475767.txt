Project Goal: Create the complete frontend for a "Blockchain-Based Secure Voting System" that is user-centric, visually stunning, highly accessible, and technically integrated with the backend/ZK architecture. The design should look and feel like a secure, modern platform ready for public NGO launch.

Core Technology & Setup
Framework: Use React.js (or Next.js for better routing/API integration, if the agent supports it) for the entire application.

Styling: Implement a modern, clean, and highly responsive design using a utility-first CSS framework like Tailwind CSS or a professional component library like Chakra UI/Material UI. Use a dark blue/teal/white color palette to convey trust and security.

Dependencies: Include necessary placeholder imports for the ZK toolkit (e.g., semaphore or snarkjs) and the blockchain connection (e.g., web3.js or ethers.js).

Required Pages & User Flow
The application must be fully responsive (desktop, tablet, mobile) and include the following pages/sections:

Home/Landing Page
Purpose: Introduce the system, build trust, and drive user action.

Content:

Main Title: "Secure, Transparent, and Anonymous Voting"

Subtitle: "Leveraging Zero-Knowledge Proofs and Blockchain for the Future of Democracy."

Trust Pillars Section: Highlight the key benefits with clear icons: Anonymity (ZK Proofs), Tamper-Proof (Blockchain), Gasless (Org Wallets), No PII (Privacy).

Call-to-Action (CTA): A prominent, unmissable button: "Start Voting Now" that leads to the Login/Session Initiation page.

Footer: Links for "About Us," "How It Works (Technical Overview)," and "Audit/Verification."

Voter Login / Session Initiation Page
Purpose: Initiate a non-identity-based session for user flow.

Design: Minimalist, emphasizing that this step is only for session continuity, not identity verification.

Login Method: Provide a single, large button for "Continue with Google/Email" (as a placeholder for OAuth).

Privacy Disclaimer (Critical): Display a clear, reassuring note: "Your login is only used to manage your session and flow. It is not connected to your vote or identity. No personal data (name, email, ID) is stored or tracked for your vote.".

Voting Interface (Core Page) Purpose: Allow the user to view candidates, generate their anonymous ZK Identity, and securely cast their vote.
Steps/Interface Flow (must be distinct and visually guided):

ZK Identity Generation:

Show a loading spinner or progress bar with the text: "Generating Anonymous ZK Identity..."

After generation, display a confirmation: "âœ… Anonymous Voter Identity Created. You are ready to vote privately.".

Candidate Selection:

Display a list of candidates with their image, name, party, and a brief biography.

Use a card-based, easily selectable UI (like large, interactive buttons) for each candidate.

Highlight the selected candidate clearly.

Casting Vote:

A prominent, unmissable button at the bottom: "Cast Anonymous Vote".

Upon click, show an intermediary modal/overlay.

Vote Finalization & Proof Generation Modal Purpose: Execute the client-side cryptography and send the payload securely.
Design: A non-interruptible modal with a step-by-step progress indicator:

Step 1/3: Generating ZK Proof: "Creating cryptographic proof of eligibility and uniqueness...".

Step 2/3: Generating Nullifier: "Creating one-time anonymous token to prevent double-voting...".

Step 3/3: Sending to Secure Backend: "Securely transmitting encrypted vote and proof for on-chain submission (Gasless)...".

Confirmation / Thank You Page Purpose: Confirm successful submission and provide auditability links.
Content:

A clear success message: "ðŸŽ‰ Your Vote Has Been Successfully and Anonymously Cast!"

Audit Link: Provide a placeholder link/button for "View Transaction Hash" (this link would point to a block explorer, showing the transaction ID cast by the organizational wallet, proving the vote was recorded immutably).

Final Note: Reiterate that the vote is final and cannot be altered or traced back to the user.

Key UX/UI Principles (Do not miss) Accessibility: Ensure high contrast, large, legible fonts, and use appropriate WAI-ARIA roles.
Focus on Trust: Use lock icons, shield icons, and security-themed imagery strategically to reinforce the system's core value.

Simplicity: The entire voter flow, from login to confirmation, must be simple and take no more than three intuitive steps.

No Wallet Integration: Crucially, the frontend should never prompt the user to connect a MetaMask/crypto wallet, as the system uses organizational wallets for gasless proxying.